// This file will contain training-related routes.

import { Router, Response } from "express";
import { db } from "../db";
import {
  trainingPrograms,
  trainingModules,
  trainingEnrollments,
  trainingProgress,
  trainingCourses,
  trainingQuizzes,
  trainingContests,
  trainingMedia,
  certificateTemplates,
  userResponses,
  users
} from "../../shared/schema";
import { authenticateToken, AuthenticatedRequest } from "../lib/auth";
import { and, eq, not, isNull } from "drizzle-orm";
import { getCompletionCertificate } from "../lib/certificate-service";
import { getAiRecommendations, createAiCourse, editAiCourse, generateAiQuestionBank, generateAiGraphicsPrompt, enhanceAiModule, generateAdaptiveQuiz, getAiFeedback } from '../lib/ai-service';
import { upload } from '../storage';

const router = Router();

// Enhanced Training Platform Routes

// Learning Path
router.get("/learning-path/:userId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    // ... logic for /learning-path/:userId
});

// Certificate Templates
router.get("/templates", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    // ... logic for /templates
});

// Courses
router.get("/courses", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const allCourses = await db.select().from(trainingCourses);
        res.json(allCourses);
    } catch (error) {
        console.error("Failed to fetch courses:", error);
        res.status(500).json({ error: "Failed to fetch courses" });
    }
});
router.get("/courses/:id", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.id);
        const course = await db.select().from(trainingCourses).where(eq(trainingCourses.id, courseId));
        if (course.length > 0) {
            res.json(course[0]);
        } else {
            res.status(404).json({ error: "Course not found" });
        }
    } catch (error) {
        console.error("Failed to fetch course:", error);
        res.status(500).json({ error: "Failed to fetch course" });
    }
});
router.post("/courses", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const newCourse = await db.insert(trainingCourses).values(req.body).returning();
        res.status(201).json(newCourse[0]);
    } catch (error) {
        console.error("Failed to create course:", error);
        res.status(500).json({ error: "Failed to create course" });
    }
});
router.put("/courses/:id", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.id);
        const updatedCourse = await db.update(trainingCourses).set(req.body).where(eq(trainingCourses.id, courseId)).returning();
        res.json(updatedCourse[0]);
    } catch (error) {
        console.error("Failed to update course:", error);
        res.status(500).json({ error: "Failed to update course" });
    }
});
router.delete("/courses/:id", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.id);
        await db.delete(trainingCourses).where(eq(trainingCourses.id, courseId));
        res.status(204).send();
    } catch (error) {
        console.error("Failed to delete course:", error);
        res.status(500).json({ error: "Failed to delete course" });
    }
});

// Enrollments & Progress
router.post("/enroll", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { courseId } = req.body;
        const userId = req.user!.id;
        const newEnrollment = await db.insert(trainingEnrollments).values({ userId, courseId, status: 'enrolled' }).returning();
        res.status(201).json(newEnrollment[0]);
    } catch (error) {
        console.error("Failed to enroll in course:", error);
        res.status(500).json({ error: "Failed to enroll in course" });
    }
});
router.get("/enrollments/my", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const userId = req.user!.id;
        const myEnrollments = await db.select().from(trainingEnrollments).where(eq(trainingEnrollments.userId, userId));
        res.json(myEnrollments);
    } catch (error) {
        console.error("Failed to fetch enrollments:", error);
        res.status(500).json({ error: "Failed to fetch enrollments" });
    }
});
router.post("/progress", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { enrollmentId, moduleId, progress } = req.body;
        const updatedProgress = await db.insert(trainingProgress).values({ enrollmentId, moduleId, progress }).returning();
        res.status(201).json(updatedProgress[0]);
    } catch (error) {
        console.error("Failed to update progress:", error);
        res.status(500).json({ error: "Failed to update progress" });
    }
});

// Certificate
router.get("/certificate/:enrollmentId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const enrollmentId = parseInt(req.params.enrollmentId);
        const templateId = req.query.templateId as string;

        const enrollment = await db.query.trainingEnrollments.findFirst({
            where: eq(trainingEnrollments.id, enrollmentId),
            with: {
                user: true,
                course: true,
            },
        });

        if (!enrollment || enrollment.userId !== req.user!.id) {
            return res.status(404).json({ error: "Enrollment not found or access denied" });
        }

        const pdfBuffer = await getCompletionCertificate(enrollment, templateId);

        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename=certificate-${enrollmentId}.pdf`);
        res.send(pdfBuffer);
    } catch (error) {
        console.error("Failed to generate certificate:", error);
        res.status(500).json({ error: "Failed to generate certificate" });
    }
});

// Analytics
router.get("/analytics", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        // This is a simplified analytics endpoint. A real implementation would be more complex.
        const totalEnrollments = await db.select().from(trainingEnrollments).execute();
        const completedEnrollments = await db.select().from(trainingEnrollments).where(eq(trainingEnrollments.status, 'completed')).execute();
        const activeUsers = await db.select().from(users).where(and(eq(users.status, 'active'), not(isNull(users.lastLogin)))).execute();

        res.json({
            totalEnrollments: totalEnrollments.length,
            completedEnrollments: completedEnrollments.length,
            completionRate: totalEnrollments.length > 0 ? (completedEnrollments.length / totalEnrollments.length) * 100 : 0,
            activeUsers: activeUsers.length
        });
    } catch (error) {
        console.error("Failed to fetch analytics:", error);
        res.status(500).json({ error: "Failed to fetch analytics" });
    }
});

// AI Features
router.post("/ai/recommendations", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const userId = req.user!.id;
        const recommendations = await getAiRecommendations(userId);
        res.json(recommendations);
    } catch (error) {
        console.error("AI recommendations error:", error);
        res.status(500).json({ error: "Failed to get AI recommendations" });
    }
});
router.post("/ai/quiz", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { courseId, userId } = req.body;
        const quiz = await generateAdaptiveQuiz(courseId, userId);
        res.json(quiz);
    } catch (error) {
        console.error("AI quiz generation error:", error);
        res.status(500).json({ error: "Failed to generate AI quiz" });
    }
});
router.post("/ai/feedback", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { userResponses } = req.body; // Expects an array of responses
        const feedback = await getAiFeedback(userResponses);
        res.json(feedback);
    } catch (error) {
        console.error("AI feedback error:", error);
        res.status(500).json({ error: "Failed to get AI feedback" });
    }
});
router.post("/ai/create-course", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { topic } = req.body;
        const newCourse = await createAiCourse(topic, req.user!.id);
        res.status(201).json(newCourse);
    } catch (error) {
        console.error("AI course creation error:", error);
        res.status(500).json({ error: "Failed to create AI course" });
    }
});
router.post("/ai/edit-course", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { courseId, instruction } = req.body;
        const updatedCourse = await editAiCourse(courseId, instruction);
        res.json(updatedCourse);
    } catch (error) {
        console.error("AI course editing error:", error);
        res.status(500).json({ error: "Failed to edit AI course" });
    }
});
router.post("/ai/question-bank", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { topic, numQuestions } = req.body;
        const questionBank = await generateAiQuestionBank(topic, numQuestions);
        res.json(questionBank);
    } catch (error) {
        console.error("AI question bank generation error:", error);
        res.status(500).json({ error: "Failed to generate AI question bank" });
    }
});
router.post("/ai/graphics-prompt", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { content } = req.body;
        const prompt = await generateAiGraphicsPrompt(content);
        res.json({ prompt });
    } catch (error) {
        console.error("AI graphics prompt generation error:", error);
        res.status(500).json({ error: "Failed to generate AI graphics prompt" });
    }
});
router.post("/ai/enhance-module", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { moduleContent } = req.body;
        const enhancedContent = await enhanceAiModule(moduleContent);
        res.json(enhancedContent);
    } catch (error) {
        console.error("AI module enhancement error:", error);
        res.status(500).json({ error: "Failed to enhance module with AI" });
    }
});

// Programs
router.get("/programs", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const programs = await db.select().from(trainingPrograms);
        res.json(programs);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch training programs" });
    }
});
router.post("/programs", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const newProgram = await db.insert(trainingPrograms).values(req.body).returning();
        res.status(201).json(newProgram[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to create training program" });
    }
});
router.put("/programs/:id", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const id = parseInt(req.params.id);
        const updatedProgram = await db.update(trainingPrograms).set(req.body).where(eq(trainingPrograms.id, id)).returning();
        res.json(updatedProgram[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to update training program" });
    }
});
router.delete("/programs/:id", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const id = parseInt(req.params.id);
        await db.delete(trainingPrograms).where(eq(trainingPrograms.id, id));
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ error: "Failed to delete training program" });
    }
});
router.get("/programs/:id", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const id = parseInt(req.params.id);
        const program = await db.select().from(trainingPrograms).where(eq(trainingPrograms.id, id));
        res.json(program[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch training program" });
    }
});

// Media
router.post("/media/upload", authenticateToken, upload.single('media'), async (req: AuthenticatedRequest, res: Response) => {
    // ... logic for /media/upload
    // This route is complex and will be handled separately
    res.status(501).json({ message: "Not Implemented" });
});
router.get("/media", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const media = await db.select().from(trainingMedia);
        res.json(media);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch media" });
    }
});
router.delete("/media/:mediaId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
     try {
        const mediaId = parseInt(req.params.mediaId);
        await db.delete(trainingMedia).where(eq(trainingMedia.id, mediaId));
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ error: "Failed to delete media" });
    }
});

// Modules
router.get("/courses/:courseId/modules", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const modules = await db.select().from(trainingModules).where(eq(trainingModules.courseId, courseId));
        res.json(modules);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch modules" });
    }
});
router.post("/courses/:courseId/modules", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const newModule = await db.insert(trainingModules).values({ ...req.body, courseId }).returning();
        res.status(201).json(newModule[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to create module" });
    }
});
router.put("/modules/:moduleId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const moduleId = parseInt(req.params.moduleId);
        const updatedModule = await db.update(trainingModules).set(req.body).where(eq(trainingModules.id, moduleId)).returning();
        res.json(updatedModule[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to update module" });
    }
});
router.delete("/modules/:moduleId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const moduleId = parseInt(req.params.moduleId);
        await db.delete(trainingModules).where(eq(trainingModules.id, moduleId));
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ error: "Failed to delete module" });
    }
});

// Quizzes
router.get("/courses/:courseId/quizzes", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const quizzes = await db.select().from(trainingQuizzes).where(eq(trainingQuizzes.courseId, courseId));
        res.json(quizzes);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch quizzes" });
    }
});
router.post("/courses/:courseId/quizzes", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const newQuiz = await db.insert(trainingQuizzes).values({ ...req.body, courseId }).returning();
        res.status(201).json(newQuiz[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to create quiz" });
    }
});
router.put("/quizzes/:quizId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const quizId = parseInt(req.params.quizId);
        const updatedQuiz = await db.update(trainingQuizzes).set(req.body).where(eq(trainingQuizzes.id, quizId)).returning();
        res.json(updatedQuiz[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to update quiz" });
    }
});
router.delete("/quizzes/:quizId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const quizId = parseInt(req.params.quizId);
        await db.delete(trainingQuizzes).where(eq(trainingQuizzes.id, quizId));
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ error: "Failed to delete quiz" });
    }
});

// Contests
router.get("/courses/:courseId/contests", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const contests = await db.select().from(trainingContests).where(eq(trainingContests.courseId, courseId));
        res.json(contests);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch contests" });
    }
});
router.post("/courses/:courseId/contests", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const newContest = await db.insert(trainingContests).values({ ...req.body, courseId, createdBy: req.user!.id }).returning();
        res.status(201).json(newContest[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to create contest" });
    }
});
router.put("/contests/:contestId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const contestId = parseInt(req.params.contestId);
        const updatedContest = await db.update(trainingContests).set(req.body).where(eq(trainingContests.id, contestId)).returning();
        res.json(updatedContest[0]);
    } catch (error) {
        res.status(500).json({ error: "Failed to update contest" });
    }
});
router.delete("/contests/:contestId", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const contestId = parseInt(req.params.contestId);
        await db.delete(trainingContests).where(eq(trainingContests.id, contestId));
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ error: "Failed to delete contest" });
    }
});

// Course Media
router.get("/courses/:courseId/media", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const courseId = parseInt(req.params.courseId);
        const media = await db.select().from(trainingMedia).where(eq(trainingMedia.courseId, courseId));
        res.json(media);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch media" });
    }
});
router.post("/courses/:courseId/media", authenticateToken, upload.single('file'), async (req: AuthenticatedRequest, res: Response) => {
    // ... logic for POST /courses/:courseId/media
    // This route is complex and will be handled separately
    res.status(501).json({ message: "Not Implemented" });
});

export default router;